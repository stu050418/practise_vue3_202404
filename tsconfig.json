{
  "files": [
    // "hello.ts" //若指定 files，則只會編譯指定的 hello.ts 檔案。
  ],
  // "exclude": [   //指定編譯器需要排除的文件或文件夾
  //   "node_modules"
  // ],
  // "extends": "./tsconfig.base.json",         //把基礎配置抽離成tsconfig.base.json檔案，然後引入
  //  //自動引入函式庫相關定義文件(.d.ts)。
  // "typeAcquisition": {   
  //   "enable": false,
  //   "exclude": ["jquery"],
  //   "include": ["jest"]
  // },
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "compilerOptions": {
    // "compileOnSave": false,    //編輯器在儲存檔案的時候根據tsconfig.json重新產生編譯檔案

    /* 基本選項 */ //關掉三個，因為出現錯誤
    "target": "es5",                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    // "module": "commonjs",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "lib": [],                             // 指定要包含在编译中的库文件
    "allowJs": true,                       // 允许编译 javascript 文件
    "checkJs": true,                       // 报告 javascript 文件中的错误
    "jsx": "preserve",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "declaration": true,                   // 生成相应的 '.d.ts' 文件
    "declarationMap": true, //生成宣告檔案的 sourceMap
    "sourceMap": true,                     // 生成相应的 '.map' 文件
    // "outFile": "./",                       // 将输出文件合并为一个文件
    "outDir": "./",                        // 指定输出目录
    "rootDir": "./",                       // 用来控制输出目录结构 --outDir.
    "removeComments": true,                // 删除编译后的所有的注释
    "composite": true, // 是否编译构建引用项目
    "noEmit": true,                        // 不生成输出文件
    "importHelpers": true,                 // 从 tslib 导入辅助工具函数
    // "isolatedModules": true,               // 将每个文件作为单独的模块 （与 'ts.transpileModule' 类似）.
    "tsBuildInfoFile": "./", // 指定文件存儲增量編譯信息，默認為 tsconfig.tsbuildinfo

    /* 嚴格的類型檢查選項 */
    // "strict": true,                     // 啟用所有嚴格類型檢查選項
    // "noImplicitAny": true,              // 在表達式和聲明上有隱含的 any類型時報錯
    // "strictNullChecks": true,           // 啟用嚴格的 null 檢查
    // "strictFunctionTypes": true,    //啟用檢查function型別
    // "strictBindCallApply": true,   //啟用對 bind, call, apply 更嚴格的型別檢查
    // "strictPropertyInitialization": true,     //啟用class实例属性的賦值檢查
    // "noImplicitThis": true,             //當 this 表達式值為 any 類型的時候，生成一個錯誤
    // "alwaysStrict": true,               // 以嚴格模式檢查每個module，並在每個文件裡加入 'use strict'

    /* 額外的檢查 */
    // "noUnusedLocals": true,             // 有未使用的變數時，拋出錯誤
    // "noUnusedParameters": true,         // 有未使用的參數時，拋出錯誤
    // "noImplicitReturns": true,          // 並不是所有function里的代碼都有返回值時，拋出錯誤
    // "noFallthroughCasesInSwitch": true, // 報告 switch 語句的 fallthrough 錯誤。 （即，不允許 switch 的 case 語句貫穿）
    // "noUncheckedIndexedAccess": true,       //檢查 index signature 屬性是否是undefined

    /* 模組選項 */
    // "moduleResolution": "node",         // 選擇模組解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    // "baseUrl": "./",                    // 用於解析非相對模組名稱的基目錄
    // "paths": {},                        // 模組名到基於 baseUrl 的路徑映射的列表
    // "rootDirs": [],                     // 根文件夾列表，其組合內容表示項目運行時的結構內容
    // "typeRoots": [],                    // 包含類型聲明的文件列表
    // "types": [],                        // 需要包含的類型聲明文件名列表
    // "allowSyntheticDefaultImports": true,  // 允許從沒有設置默認導出的模組中默認導入。

    /* Source Map Options */
    // "sourceRoot": "./",                 // 指定調試器應該找到 TypeScript 文件而不是源文件的位置
    // "mapRoot": "./",                    // 指定調試器應該找到映射文件而不是生成文件的位置
    // "inlineSourceMap": true,            // 生成單個 soucemaps 文件，而不是將 sourcemaps 生成不同的文件
    // "inlineSources": true,              // 將代碼與 sourcemaps 生成到一個文件中，要求同時設置了 --inlineSourceMap 或 --sourceMap 屬性

    /* 其他選項 */
    "experimentalDecorators": true,        // 啟用裝飾器
    "emitDecoratorMetadata": true,         // 為裝飾器提供元數據的支持

    /* 進階選項 */
    "skipLibCheck": true,                    //不會檢查引入的函式庫檔案
    "forceConsistentCasingInFileNames": true // 確保檔案的大小寫一致
  }

}

/* GPT tsconfig.base.json 基礎範例

  {
    "compilerOptions": {
      "target": "es5",
      "module": "commonjs",
      "strict": true,
      "sourceMap": true
    },
    "exclude": ["node_modules"]
  }
*/

/* GPT 給的無調整 01版 常用規範
  {
    "compilerOptions": {
      "target": "es5",                           // 目標編譯版本
      "module": "es2020",                        // 模組系統為 ES 模塊
      "strict": true,                            // 啟用所有嚴格類型檢查
      "esModuleInterop": true,                   // 啟用導入命名空間
      "skipLibCheck": true,                      // 不檢查引入的函式庫檔案
      "forceConsistentCasingInFileNames": true,  // 確保檔案的大小寫一致
      "moduleResolution": "node",                // 使用 Node.js 模組解析策略
      "jsx": "react",                            // 啟用 JSX 支持，這裡以 React 為例
      "baseUrl": "./",                           // 指定相對路徑的基底路徑
      "paths": {                                 // 模組路徑映射
        "@/components/*": ["src/components/*"],
        "@/utils/*": ["src/utils/*"]
      }
    },
    "exclude": ["node_modules"]                 // 排除目錄
  }
*/

/* GPT 給的無調整 02版 常用規範
  {
    "compilerOptions": {
      "target": "es5",
      "module": "esnext", // 前端建議使用 'esnext'，配合模塊打包工具如 Webpack 或 Rollup.js
      "strict": true,
      "jsx": "react",
      "esModuleInterop": true, // 允許以 es 模塊的方式引入 CommonJS 模塊
      "moduleResolution": "node",
      "allowSyntheticDefaultImports": true,
      "forceConsistentCasingInFileNames": true,
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true, // 前端通常不需要產生 .js 檔案，由打包工具處理
      "noImplicitAny": false // 在需要時可設為 true，強制顯式定義變數的類型
    },
    "exclude": ["node_modules"]
  }
*/